{"contents":"const isLocalhost = Boolean(window.location.hostname === 'localhost' || window.location.hostname === '[::1]' || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nfunction register(config) {\n  if (\"development\" === 'production' && ('serviceWorker' in navigator)) {\n    const publicUrl = new URL(undefined, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n    window.addEventListener('load', () => {\n      const swUrl = `${undefined}/service-worker.js`;\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\nexports.register = register;\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.');\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            console.log('Content is cached for offline use.');\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(response => {\n    const contentType = response.headers.get('content-type');\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\nfunction unregister() {\n  if (('serviceWorker' in navigator)) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}\nexports.unregister = unregister;\n","sourceMap":"{\"version\":3,\"sources\":[\"src/serviceWorker.ts\"],\"names\":[\"isLocalhost\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"config\",\"navigator\",\"publicUrl\",\"URL\",\"href\",\"origin\",\"addEventListener\",\"swUrl\",\"checkValidServiceWorker\",\"serviceWorker\",\"ready\",\"then\",\"console\",\"log\",\"registerValidSW\",\"register\",\"registration\",\"onupdatefound\",\"installingWorker\",\"installing\",\"onstatechange\",\"state\",\"controller\",\"onUpdate\",\"onSuccess\",\"catch\",\"error\",\"fetch\",\"headers\",\"response\",\"contentType\",\"get\",\"status\",\"indexOf\",\"unregister\",\"reload\",\"message\"],\"mappings\":\"MAYMA,cAAcC,QAClBC,OAAOC,SAASC,aAAa,eAE3BF,OAAOC,SAASC,aAAa,WAE7BF,OAAOC,SAASC,SAASC,MACvB;AASC,kBAAkBC;MACnB,kBAAyB,iBAAgB,mBAAmBC;UAExDC,gBAAgBC,MAEpBP,OAAOC,SAASO;QAEdF,UAAUG,WAAWT,OAAOC,SAASQ;;;IAOzCT,OAAOU,iBAAiB,QAAQ;YACxBC;UAEFb;QAEFc,wBAAwBD,OAAOP;QAI/BC,UAAUQ,cAAcC,MAAMC,KAAK;UACjCC,QAAQC,IACN,2DACE;;;QAKNC,gBAAgBP,OAAOP;;;;;;AAM/B,yBAAyBO,OAAeP;EACtCC,UAAUQ,cACPM,SAASR,OACTI,KAAK,AAAAK;IACJA,aAAaC,gBAAgB;YACrBC,mBAAmBF,aAAaG;UAClCD,oBAAoB;;;MAGxBA,iBAAiBE,gBAAgB;YAC3BF,iBAAiBG,UAAU;cACzBpB,UAAUQ,cAAca;YAI1BV,QAAQC,IACN,wDACE;gBAIAb,UAAUA,OAAOuB;cACnBvB,OAAOuB,SAASP;;;YAMlBJ,QAAQC,IAAI;gBAGRb,UAAUA,OAAOwB;cACnBxB,OAAOwB,UAAUR;;;;;;KAO5BS,MAAM,AAAAC;IACLd,QAAQc,MAAM,6CAA6CA;;;AAIjE,iCAAiCnB,OAAeP;EAE9C2B,MAAMpB;IACJqB;MAAW,kBAAkB;;KAE5BjB,KAAK,AAAAkB;UAEEC,cAAcD,SAASD,QAAQG,IAAI;QAEvCF,SAASG,WAAW,OACnBF,eAAe,QAAQA,YAAYG,QAAQ,mBAAmB;MAG/DhC,UAAUQ,cAAcC,MAAMC,KAAK,AAAAK;QACjCA,aAAakB,aAAavB,KAAK;UAC7Bf,OAAOC,SAASsC;;;;MAKpBrB,gBAAgBP,OAAOP;;KAG1ByB,MAAM;IACLb,QAAQC,IACN;;;AAKD;OACD,mBAAmBZ;IACrBA,UAAUQ,cAAcC,MACrBC,KAAK,AAAAK;MACJA,aAAakB;OAEdT,MAAM,AAAAC;MACLd,QAAQc,MAAMA,MAAMU\",\"sourcesContent\":[\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.0/8 are considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\ntype Config = {\\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\\n};\\n\\nexport function register(config?: Config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(\\n      process.env.PUBLIC_URL,\\n      window.location.href\\n    );\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl: string, config?: Config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl, {\\n    headers: { 'Service-Worker': 'script' }\\n  })\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready\\n      .then(registration => {\\n        registration.unregister();\\n      })\\n      .catch(error => {\\n        console.error(error.message);\\n      });\\n  }\\n}\\n\"]}"}