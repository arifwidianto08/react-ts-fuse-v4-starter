{"contents":"'use strict';\nvar printWarning = function () {};\nvar ReactPropTypesSecret = __fusereq(19);\nvar loggedTypeFailures = {};\nvar has = Function.call.bind(Object.prototype.hasOwnProperty);\nprintWarning = function (text) {\n  var message = 'Warning: ' + text;\n  if (typeof console !== 'undefined') {\n    console.error(message);\n  }\n  try {\n    throw new Error(message);\n  } catch (x) {}\n};\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  for (var typeSpecName in typeSpecs) {\n    if (has(typeSpecs, typeSpecName)) {\n      var error;\n      try {\n        if (typeof typeSpecs[typeSpecName] !== 'function') {\n          var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');\n          err.name = 'Invariant Violation';\n          throw err;\n        }\n        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n      } catch (ex) {\n        error = ex;\n      }\n      if (error && !(error instanceof Error)) {\n        printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');\n      }\n      if (error instanceof Error && !((error.message in loggedTypeFailures))) {\n        loggedTypeFailures[error.message] = true;\n        var stack = getStack ? getStack() : '';\n        printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));\n      }\n    }\n  }\n}\ncheckPropTypes.resetWarningCache = function () {\n  loggedTypeFailures = {};\n};\nmodule.exports = checkPropTypes;\n"}