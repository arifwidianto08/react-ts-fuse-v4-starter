{"version":3,"sources":["src/serviceWorker.ts","src/App.tsx","src/index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","config","navigator","publicUrl","URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message","logo_svg_1d","App","react_dom_1d","render","react_1d","StrictMode","App_1d","document","getElementById"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAYMA,cAAcC,QAClBC,OAAOC,SAASC,aAAa,eAE3BF,OAAOC,SAASC,aAAa,WAE7BF,OAAOC,SAASC,SAASC,MACvB;AASC,kBAAkBC;MACnB,kBAAyB,iBAAgB,mBAAmBC;UAExDC,gBAAgBC,MAEpBP,OAAOC,SAASO;QAEdF,UAAUG,WAAWT,OAAOC,SAASQ;;;IAOzCT,OAAOU,iBAAiB,QAAQ;YACxBC;UAEFb;QAEFc,wBAAwBD,OAAOP;QAI/BC,UAAUQ,cAAcC,MAAMC,KAAK;UACjCC,QAAQC,IACN,2DACE;;;QAKNC,gBAAgBP,OAAOP;;;;;;AAM/B,yBAAyBO,OAAeP;EACtCC,UAAUQ,cACPM,SAASR,OACTI,KAAKK,AAAA;IACJA,aAAaC,gBAAgB;YACrBC,mBAAmBF,aAAaG;UAClCD,oBAAoB;;;MAGxBA,iBAAiBE,gBAAgB;YAC3BF,iBAAiBG,UAAU;cACzBpB,UAAUQ,cAAca;YAI1BV,QAAQC,IACN,wDACE;gBAIAb,UAAUA,OAAOuB;cACnBvB,OAAOuB,SAASP;;;YAMlBJ,QAAQC,IAAI;gBAGRb,UAAUA,OAAOwB;cACnBxB,OAAOwB,UAAUR;;;;;;KAO5BS,MAAMC,AAAA;IACLd,QAAQc,MAAM,6CAA6CA;;;AAIjE,iCAAiCnB,OAAeP;EAE9C2B,MAAMpB;IACJqB;MAAW,kBAAkB;;KAE5BjB,KAAKkB,AAAA;UAEEC,cAAcD,SAASD,QAAQG,IAAI;QAEvCF,SAASG,WAAW,OACnBF,eAAe,QAAQA,YAAYG,QAAQ,mBAAmB;MAG/DhC,UAAUQ,cAAcC,MAAMC,KAAKK,AAAA;QACjCA,aAAakB,aAAavB,KAAK;UAC7Bf,OAAOC,SAASsC;;;;MAKpBrB,gBAAgBP,OAAOP;;KAG1ByB,MAAM;IACLb,QAAQC,IACN;;;AAKD;OACD,mBAAmBZ;IACrBA,UAAUQ,cAAcC,MACrBC,KAAKK,AAAA;MACJA,aAAakB;OAEdT,MAAMC,AAAA;MACLd,QAAQc,MAAMA,MAAMU;;;;;;;;;;;;;;;;AC7I5B;;eAEmB;;eACK;;SACNC;eAAgB;SAAe;;eAK7B;UACL;YACE;SACH;4IAOH;;kBASIC;;;;;;;;;;;;;;;AC1BfC,qBAASC,sCACNC,iBAAMC,iDACJC,wBAEHC,SAASC,eAAe;gBAMZ9B","file":"","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://github.com/arifwidianto08\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React with Arif\n        </a>\n      </header>\n      <div>\n        <p>\n          {\" \"}\n          Please learn with carefully and use the documentation as your learn\n          partner!\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"]}